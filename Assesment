// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EducationLoan {

    struct Student {
        string name;
        uint age;
        string collegeName;
        bool hasLoan;
    }

    mapping(address => Student) public students;
    mapping(address => bool) public accounts;

    uint constant loanAmount = 7000;

    event AccountCreated(address indexed studentAddress, string name, uint age);
    event LoanSanctioned(address indexed studentAddress, uint amount);
    event CollegeInformationUpdated(address indexed studentAddress, string collegeName);
    event StudentDataUpdated(address indexed studentAddress, string name, uint age, string collegeName);

    function createAccount(string memory _name, uint _age) public {
        require(!accounts[msg.sender], "Account already exists");

        students[msg.sender] = Student({
            name: _name,
            age: _age,
            collegeName: "",
            hasLoan: false
        });
        accounts[msg.sender] = true;

        emit AccountCreated(msg.sender, _name, _age);
    }

    function sanctionLoan() public {
        require(accounts[msg.sender], "Account does not exist");
        require(!students[msg.sender].hasLoan, "Loan already sanctioned");

        students[msg.sender].hasLoan = true;

        // Assuming the loan amount is managed off-chain or via another smart contract
        emit LoanSanctioned(msg.sender, loanAmount);
    }

    function updateCollegeInformation(string memory _collegeName) public {
        require(accounts[msg.sender], "Account does not exist");

        students[msg.sender].collegeName = _collegeName;

        emit CollegeInformationUpdated(msg.sender, _collegeName);
    }

    function updateStudentData(string memory _name, uint _age, string memory _collegeName) public {
        require(accounts[msg.sender], "Account does not exist");

        Student storage student = students[msg.sender];
        student.name = _name;
        student.age = _age;
        student.collegeName = _collegeName;

        emit StudentDataUpdated(msg.sender, _name, _age, _collegeName);
    }

    function checkAssertions() public view {
        // This function is just to demonstrate the use of assert()
        assert(accounts[msg.sender] == true);
    }

    function revertExample() public pure {
        // This function is just to demonstrate the use of revert()
        revert("This function always reverts");
    }
}
